// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type AuthPayload struct {
	Token string `json:"token"`
}

type Business struct {
	ID          string       `json:"id"`
	Name        string       `json:"name"`
	Type        BusinessType `json:"type"`
	Description string       `json:"description"`
	Location    string       `json:"location"`
	Website     string       `json:"website"`
	Contact     string       `json:"contact"`
	Image       string       `json:"image"`
	OwnerName   string       `json:"ownerName"`
	Likes       string       `json:"likes"`
}

type ChangePasswordInput struct {
	Token              string `json:"token"`
	OldPassword        string `json:"oldPassword"`
	NewPassword        string `json:"newPassword"`
	ConfirmNewPassword string `json:"confirmNewPassword"`
}

type Comment struct {
	BusinessID string    `json:"businessId"`
	Sender     string    `json:"sender"`
	Message    string    `json:"Message"`
	Date       time.Time `json:"date"`
}

type CreateBusinessInput struct {
	Token       string       `json:"token"`
	Type        BusinessType `json:"type"`
	Name        string       `json:"name"`
	Description string       `json:"description"`
	Location    string       `json:"location"`
	Website     *string      `json:"website,omitempty"`
	Contact     string       `json:"contact"`
	Image       string       `json:"image"`
}

type FetchBusinessListInput struct {
	Token      string        `json:"token"`
	Type       *BusinessType `json:"type,omitempty"`
	SearchTerm *string       `json:"searchTerm,omitempty"`
	Mine       *bool         `json:"mine,omitempty"`
}

type LoginInput struct {
	EmailorUsername string `json:"emailorUsername"`
	Password        string `json:"password"`
}

type PostCommentInput struct {
	Token   string `json:"token"`
	BizID   string `json:"bizId"`
	Message string `json:"message"`
}

type RegisterInput struct {
	Fullname        string `json:"fullname"`
	Username        string `json:"username"`
	Email           string `json:"email"`
	Password        string `json:"password"`
	Confirmpassword string `json:"confirmpassword"`
}

type User struct {
	ID           string `json:"id"`
	Name         string `json:"name"`
	Email        string `json:"email"`
	Username     string `json:"username"`
	ProfilePhoto string `json:"profilePhoto"`
	Verified     bool   `json:"verified"`
}

type BusinessType string

const (
	BusinessTypeShop    BusinessType = "SHOP"
	BusinessTypeService BusinessType = "SERVICE"
	BusinessTypeEvent   BusinessType = "EVENT"
	BusinessTypeJob     BusinessType = "JOB"
	BusinessTypeNews    BusinessType = "NEWS"
	BusinessTypeHousing BusinessType = "HOUSING"
	BusinessTypeTutor   BusinessType = "TUTOR"
)

var AllBusinessType = []BusinessType{
	BusinessTypeShop,
	BusinessTypeService,
	BusinessTypeEvent,
	BusinessTypeJob,
	BusinessTypeNews,
	BusinessTypeHousing,
	BusinessTypeTutor,
}

func (e BusinessType) IsValid() bool {
	switch e {
	case BusinessTypeShop, BusinessTypeService, BusinessTypeEvent, BusinessTypeJob, BusinessTypeNews, BusinessTypeHousing, BusinessTypeTutor:
		return true
	}
	return false
}

func (e BusinessType) String() string {
	return string(e)
}

func (e *BusinessType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BusinessType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BusinessType", str)
	}
	return nil
}

func (e BusinessType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
